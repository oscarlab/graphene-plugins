#!$(PAL)

loader.preload = file:../../deps/graphene/Runtime/libsysdb.so
loader.exec = file:protfs_app
loader.execname = protfs_app
loader.env.PATH = /:/usr/sbin:/usr/bin:/sbin:/bin
loader.env.LD_LIBRARY_PATH = /lib:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu
loader.env.USERNAME =
loader.env.HOME =
loader.env.PWD =
loader.env.PFS_MOUNT_POINT = /protfs_dir/secrets
loader.env.PFS_USE_CUSTOM_KEY = no
loader.env.LD_PRELOAD = libfileops_interceptor.so
#loader.env.LD_DEBUG = all
loader.env.HOSTNAME = test
loader.debug_type = inline
loader.syscall_symbol = syscalldb

fs.mount.lib1.type = chroot
fs.mount.lib1.path = /lib
fs.mount.lib1.uri = file:../../deps/graphene/Runtime/

fs.mount.lib2.type = chroot
fs.mount.lib2.path = /lib/x86_64-linux-gnu
fs.mount.lib2.uri = file:/lib/x86_64-linux-gnu

fs.mount.usr.type = chroot
fs.mount.usr.path = /usr
fs.mount.usr.uri = file:/usr

#Below mount point needed for libstdc++, also mount rules for sub-directories
#under a given directory, lets say /usr, should be below the top-level /usr mount rule.
#Just like /lib mount rules above.
fs.mount.lib3.type = chroot
fs.mount.lib3.path = /usr/lib/x86_64-linux-gnu
fs.mount.lib3.uri = file:/usr/lib/x86_64-linux-gnu

fs.mount.bin.type = chroot
fs.mount.bin.path = /bin
fs.mount.bin.uri = file:/bin

fs.mount.etc.type = chroot
fs.mount.etc.path = /etc
fs.mount.etc.uri = file:

fs.mount.protfs.type = chroot
fs.mount.protfs.path = /protfs_dir
fs.mount.protfs.uri = file:/home/skris14/protfs_mount

# allow to bind on port 8000
net.allow_bind.1 = 127.0.0.1:8000
# allow to connect to port 8000
net.allow_peer.1 = 127.0.0.1:8000

# sgx-related
sys.stack.size = 1m
sys.brk.size = 64M
glibc.heap_size = 16M
#sgx.enclave_size = $(MEMSIZE)
sgx.enclave_size = 1G
sgx.thread_num = 4
#sgx.thread_num = $(THREADNUM)

sgx.trusted_files.ld = file:../../deps/graphene/Runtime//ld-linux-x86-64.so.2
sgx.trusted_files.libc = file:../../deps/graphene/Runtime//libc.so.6
sgx.trusted_files.libdl = file:../../deps/graphene/Runtime//libdl.so.2
sgx.trusted_files.libm = file:../../deps/graphene/Runtime//libm.so.6
sgx.trusted_files.libpthread = file:../../deps/graphene/Runtime//libpthread.so.0
sgx.trusted_files.libcrypt = file:/lib/x86_64-linux-gnu/libcrypt.so.1
sgx.trusted_files.libstdcplusplus = file:/usr/lib/x86_64-linux-gnu/libstdc++.so.6
sgx.trusted_files.libgcc = file:/lib/x86_64-linux-gnu/libgcc_s.so.1
sgx.trusted_files.libfops = file:../../deps/graphene/Runtime//libfileops_interceptor.so
sgx.trusted_files.sealed_custom_key = file:sealed_custom_key

#Note: Access permissions applies to sub-directories recursively.
#WARNING: There should NOT be any / at the end of the directory-path below, it breaks the 
#allowed_files functionality graphenes, so even for files that do NOT exist(for example
#volume-meta-data, graphene returns true(as if file exists).
sgx.allowed_files.mount_path = file:/home/skris14/protfs_mount
